// Mocks generated by Mockito 5.4.2 from annotations
// in moovies/test/_utils/mock/test_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:moovies/src/core/network/network_exception.dart' as _i8;
import 'package:moovies/src/data/datasources/remote/remote_data_source.dart' as _i9;
import 'package:moovies/src/data/models/movie/movie_model.dart' as _i11;
import 'package:moovies/src/data/models/movie_listings_model/movie_listings_model.dart' as _i3;
import 'package:moovies/src/domain/entities/movie/movie.dart' as _i5;
import 'package:moovies/src/domain/entities/movie_listings/movie_listings.dart' as _i4;
import 'package:moovies/src/domain/repositories/repository.dart' as _i6;
import 'package:moovies/src/domain/usecases/usecase.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieListingsModel_1 extends _i1.SmartFake implements _i3.MovieListingsModel {
  _FakeMovieListingsModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieListings_2 extends _i1.SmartFake implements _i4.MovieListings {
  _FakeMovieListings_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovie_3 extends _i1.SmartFake implements _i5.Movie {
  _FakeMovie_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Repository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepository extends _i1.Mock implements _i6.Repository {
  MockRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.NetworkExceptions, _i4.MovieListings>> searchMovie({
    required String? query,
    required int? page,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovie,
          [],
          {
            #query: query,
            #page: page,
          },
        ),
        returnValue: _i7.Future<_i2.Either<_i8.NetworkExceptions, _i4.MovieListings>>.value(
            _FakeEither_0<_i8.NetworkExceptions, _i4.MovieListings>(
          this,
          Invocation.method(
            #searchMovie,
            [],
            {
              #query: query,
              #page: page,
            },
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.NetworkExceptions, _i4.MovieListings>>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i9.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.MovieListingsModel> searchMovie({
    required String? query,
    required int? page,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovie,
          [],
          {
            #query: query,
            #page: page,
          },
        ),
        returnValue: _i7.Future<_i3.MovieListingsModel>.value(_FakeMovieListingsModel_1(
          this,
          Invocation.method(
            #searchMovie,
            [],
            {
              #query: query,
              #page: page,
            },
          ),
        )),
      ) as _i7.Future<_i3.MovieListingsModel>);
}

/// A class which mocks [Usecases].
///
/// See the documentation for Mockito's code generation for more information.
class MockUsecases extends _i1.Mock implements _i10.Usecases {
  MockUsecases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i8.NetworkExceptions, _i4.MovieListings>> searchMovie({
    required String? query,
    required int? page,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovie,
          [],
          {
            #query: query,
            #page: page,
          },
        ),
        returnValue: _i7.Future<_i2.Either<_i8.NetworkExceptions, _i4.MovieListings>>.value(
            _FakeEither_0<_i8.NetworkExceptions, _i4.MovieListings>(
          this,
          Invocation.method(
            #searchMovie,
            [],
            {
              #query: query,
              #page: page,
            },
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.NetworkExceptions, _i4.MovieListings>>);
}

/// A class which mocks [MovieListingsModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieListingsModel extends _i1.Mock implements _i3.MovieListingsModel {
  MockMovieListingsModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);
  @override
  _i4.MovieListings toEntity() => (super.noSuchMethod(
        Invocation.method(
          #toEntity,
          [],
        ),
        returnValue: _FakeMovieListings_2(
          this,
          Invocation.method(
            #toEntity,
            [],
          ),
        ),
      ) as _i4.MovieListings);
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [MovieListings].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieListings extends _i1.Mock implements _i4.MovieListings {
  MockMovieListings() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);
}

/// A class which mocks [MovieModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieModel extends _i1.Mock implements _i11.MovieModel {
  MockMovieModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);
  @override
  _i5.Movie toEntity() => (super.noSuchMethod(
        Invocation.method(
          #toEntity,
          [],
        ),
        returnValue: _FakeMovie_3(
          this,
          Invocation.method(
            #toEntity,
            [],
          ),
        ),
      ) as _i5.Movie);
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Movie].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovie extends _i1.Mock implements _i5.Movie {
  MockMovie() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);
}
